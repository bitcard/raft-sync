// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api/api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathPaySyncPing = "/paysync.service.v1.PaySync/Ping"
var PathPaySyncSayHello = "/paysync.service.v1.PaySync/SayHello"
var PathPaySyncAddVoter = "/paysync.service.v1.PaySync/AddVoter"
var PathPaySyncAddData = "/paysync.service.v1.PaySync/AddData"

// PaySyncBMServer is the server API for PaySync service.
type PaySyncBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	// Leader节点添加其它节点
	AddVoter(ctx context.Context, req *VoterReq) (resp *CommonResp, err error)

	// 增量添加数据
	AddData(ctx context.Context, req *DataReq) (resp *CommonResp, err error)
}

var PaySyncSvc PaySyncBMServer

func paySyncPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PaySyncSvc.Ping(c, p)
	c.JSON(resp, err)
}

func paySyncSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PaySyncSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func paySyncAddVoter(c *bm.Context) {
	p := new(VoterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PaySyncSvc.AddVoter(c, p)
	c.JSON(resp, err)
}

func paySyncAddData(c *bm.Context) {
	p := new(DataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PaySyncSvc.AddData(c, p)
	c.JSON(resp, err)
}

// RegisterPaySyncBMServer Register the blademaster route
func RegisterPaySyncBMServer(e *bm.Engine, server PaySyncBMServer) {
	PaySyncSvc = server
	e.GET("/paysync.service.v1.PaySync/Ping", paySyncPing)
	e.GET("/paysync.service.v1.PaySync/SayHello", paySyncSayHello)
	e.GET("/paysync.service.v1.PaySync/AddVoter", paySyncAddVoter)
	e.GET("/paysync.service.v1.PaySync/AddData", paySyncAddData)
}
